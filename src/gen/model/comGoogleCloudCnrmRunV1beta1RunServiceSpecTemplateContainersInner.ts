/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerEnvInner } from './comGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerEnvInner';
import { ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerPortsInner } from './comGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerPortsInner';
import { ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerResources } from './comGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerResources';
import { ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerVolumeMountsInner } from './comGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerVolumeMountsInner';

export class ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInner {
    /**
    * Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    */
    'args'?: Array<string>;
    /**
    * Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    */
    'command'?: Array<string>;
    /**
    * List of environment variables to set in the container.
    */
    'env'?: Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerEnvInner>;
    /**
    * Required. URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
    */
    'image': string;
    /**
    * Name of the container specified as a DNS_LABEL.
    */
    'name'?: string;
    /**
    * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
    */
    'ports'?: Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerPortsInner>;
    'resources'?: ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerResources;
    /**
    * Volume to mount into the container\'s filesystem.
    */
    'volumeMounts'?: Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerVolumeMountsInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "args",
            "baseName": "args",
            "type": "Array<string>"
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>"
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerEnvInner>"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerPortsInner>"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerResources"
        },
        {
            "name": "volumeMounts",
            "baseName": "volumeMounts",
            "type": "Array<ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInnerVolumeMountsInner>"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmRunV1beta1RunServiceSpecTemplateContainersInner.attributeTypeMap;
    }
}

