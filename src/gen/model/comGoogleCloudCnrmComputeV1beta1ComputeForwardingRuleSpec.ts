/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecBackendServiceRef } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecBackendServiceRef';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecIpAddress } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecIpAddress';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecMetadataFiltersInner } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecMetadataFiltersInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecNetworkRef } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecNetworkRef';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecServiceDirectoryRegistrationsInner } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecServiceDirectoryRegistrationsInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecSubnetworkRef } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecSubnetworkRef';
import { ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecTarget } from './comGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecTarget';

export class ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpec {
    /**
    * Immutable. This field is used along with the `backend_service` field for internal load balancing or with the `target` field for internal TargetInstance. This field cannot be used with `port` or `portRange` fields. When the load balancing scheme is `INTERNAL` and protocol is TCP/UDP, specify this field to allow packets addressed to any ports will be forwarded to the backends configured with this forwarding rule.
    */
    'allPorts'?: boolean;
    /**
    * This field is used along with the `backend_service` field for internal load balancing or with the `target` field for internal TargetInstance. If the field is set to `TRUE`, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer.
    */
    'allowGlobalAccess'?: boolean;
    'backendServiceRef'?: ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecBackendServiceRef;
    /**
    * Immutable. An optional description of this resource. Provide this property when you create the resource.
    */
    'description'?: string;
    'ipAddress'?: ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecIpAddress;
    /**
    * Immutable. The IP protocol to which this rule applies. For protocol forwarding, valid options are `TCP`, `UDP`, `ESP`, `AH`, `SCTP` or `ICMP`. For Internal TCP/UDP Load Balancing, the load balancing scheme is `INTERNAL`, and one of `TCP` or `UDP` are valid. For Traffic Director, the load balancing scheme is `INTERNAL_SELF_MANAGED`, and only `TCP`is valid. For Internal HTTP(S) Load Balancing, the load balancing scheme is `INTERNAL_MANAGED`, and only `TCP` is valid. For HTTP(S), SSL Proxy, and TCP Proxy Load Balancing, the load balancing scheme is `EXTERNAL` and only `TCP` is valid. For Network TCP/UDP Load Balancing, the load balancing scheme is `EXTERNAL`, and one of `TCP` or `UDP` is valid.
    */
    'ipProtocol'?: string;
    /**
    * Immutable. The IP Version that will be used by this forwarding rule. Valid options are `IPV4` or `IPV6`. This can only be specified for an external global forwarding rule. Possible values: UNSPECIFIED_VERSION, IPV4, IPV6.
    */
    'ipVersion'?: string;
    /**
    * Immutable. Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a `PacketMirroring` rule applies to them. This can only be set to true for load balancers that have their `loadBalancingScheme` set to `INTERNAL`.
    */
    'isMirroringCollector'?: boolean;
    /**
    * Immutable. Specifies the forwarding rule type.  *   `EXTERNAL` is used for:     *   Classic Cloud VPN gateways     *   Protocol forwarding to VMs from an external IP address     *   The following load balancers: HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP *   `INTERNAL` is used for:     *   Protocol forwarding to VMs from an internal IP address     *   Internal TCP/UDP load balancers *   `INTERNAL_MANAGED` is used for:     *   Internal HTTP(S) load balancers *   `INTERNAL_SELF_MANAGED` is used for:     *   Traffic Director *   `EXTERNAL_MANAGED` is used for:     *   Global external HTTP(S) load balancers   For more information about forwarding rules, refer to [Forwarding rule concepts](/load-balancing/docs/forwarding-rule-concepts). Possible values: INVALID, INTERNAL, INTERNAL_MANAGED, INTERNAL_SELF_MANAGED, EXTERNAL, EXTERNAL_MANAGED.
    */
    'loadBalancingScheme'?: string;
    /**
    * Location represents the geographical location of the ComputeForwardingRule. Specify a region name or \"global\" for global resources. Reference: GCP definition of regions/zones (https://cloud.google.com/compute/docs/regions-zones/)
    */
    'location': string;
    /**
    * Immutable. Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of [xDS](https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md) compliant clients. In their xDS requests to Loadbalancer, xDS clients present [node metadata](https://github.com/envoyproxy/data-plane-api/search?q=%22message+Node%22+in%3A%2Fenvoy%2Fapi%2Fv2%2Fcore%2Fbase.proto&). If a match takes place, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. `TargetHttpProxy`, `UrlMap`) referenced by the `ForwardingRule` will not be visible to those proxies.  For each `metadataFilter` in this list, if its `filterMatchCriteria` is set to MATCH_ANY, at least one of the `filterLabel`s must match the corresponding label provided in the metadata. If its `filterMatchCriteria` is set to MATCH_ALL, then all of its `filterLabel`s must match with corresponding labels provided in the metadata.  `metadataFilters` specified here will be applifed before those specified in the `UrlMap` that this `ForwardingRule` references.  `metadataFilters` only applies to Loadbalancers that have their loadBalancingScheme set to `INTERNAL_SELF_MANAGED`.
    */
    'metadataFilters'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecMetadataFiltersInner>;
    'networkRef'?: ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecNetworkRef;
    /**
    * Immutable. This signifies the networking tier used for configuring this load balancer and can only take the following values: `PREMIUM`, `STANDARD`. For regional ForwardingRule, the valid values are `PREMIUM` and `STANDARD`. For GlobalForwardingRule, the valid value is `PREMIUM`. If this field is not specified, it is assumed to be `PREMIUM`. If `IPAddress` is specified, this value must be equal to the networkTier of the Address.
    */
    'networkTier'?: string;
    /**
    * Immutable. When the load balancing scheme is `EXTERNAL`, `INTERNAL_SELF_MANAGED` and `INTERNAL_MANAGED`, you can specify a `port_range`. Use with a forwarding rule that points to a target proxy or a target pool. Do not use with a forwarding rule that points to a backend service. This field is used along with the `target` field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance. Applicable only when `IPProtocol` is `TCP`, `UDP`, or `SCTP`, only packets addressed to ports in the specified range will be forwarded to `target`. Forwarding rules with the same `[IPAddress, IPProtocol]` pair must have disjoint port ranges. Some types of forwarding target have constraints on the acceptable ports:  *   TargetHttpProxy: 80, 8080 *   TargetHttpsProxy: 443 *   TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222 *   TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1688, 1883, 5222 *   TargetVpnGateway: 500, 4500  @pattern: d+(?:-d+)?.
    */
    'portRange'?: string;
    /**
    * Immutable. This field is used along with the `backend_service` field for internal load balancing. When the load balancing scheme is `INTERNAL`, a list of ports can be configured, for example, [\'80\'], [\'8000\',\'9000\']. Only packets addressed to these ports are forwarded to the backends configured with the forwarding rule. If the forwarding rule\'s loadBalancingScheme is INTERNAL, you can specify ports in one of the following ways: * A list of up to five ports, which can be non-contiguous * Keyword `ALL`, which causes the forwarding rule to forward traffic on any port of the forwarding rule\'s protocol. @pattern: d+(?:-d+)? For more information, refer to [Port specifications](/load-balancing/docs/forwarding-rule-concepts#port_specifications).
    */
    'ports'?: Array<string>;
    /**
    * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    */
    'resourceID'?: string;
    /**
    * Immutable. Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource.
    */
    'serviceDirectoryRegistrations'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecServiceDirectoryRegistrationsInner>;
    /**
    * Immutable. An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters long, and comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for internal load balancing.
    */
    'serviceLabel'?: string;
    'subnetworkRef'?: ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecSubnetworkRef;
    'target'?: ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecTarget;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allPorts",
            "baseName": "allPorts",
            "type": "boolean"
        },
        {
            "name": "allowGlobalAccess",
            "baseName": "allowGlobalAccess",
            "type": "boolean"
        },
        {
            "name": "backendServiceRef",
            "baseName": "backendServiceRef",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecBackendServiceRef"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecIpAddress"
        },
        {
            "name": "ipProtocol",
            "baseName": "ipProtocol",
            "type": "string"
        },
        {
            "name": "ipVersion",
            "baseName": "ipVersion",
            "type": "string"
        },
        {
            "name": "isMirroringCollector",
            "baseName": "isMirroringCollector",
            "type": "boolean"
        },
        {
            "name": "loadBalancingScheme",
            "baseName": "loadBalancingScheme",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        },
        {
            "name": "metadataFilters",
            "baseName": "metadataFilters",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecMetadataFiltersInner>"
        },
        {
            "name": "networkRef",
            "baseName": "networkRef",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecNetworkRef"
        },
        {
            "name": "networkTier",
            "baseName": "networkTier",
            "type": "string"
        },
        {
            "name": "portRange",
            "baseName": "portRange",
            "type": "string"
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "Array<string>"
        },
        {
            "name": "resourceID",
            "baseName": "resourceID",
            "type": "string"
        },
        {
            "name": "serviceDirectoryRegistrations",
            "baseName": "serviceDirectoryRegistrations",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecServiceDirectoryRegistrationsInner>"
        },
        {
            "name": "serviceLabel",
            "baseName": "serviceLabel",
            "type": "string"
        },
        {
            "name": "subnetworkRef",
            "baseName": "subnetworkRef",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecSubnetworkRef"
        },
        {
            "name": "target",
            "baseName": "target",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpecTarget"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmComputeV1beta1ComputeForwardingRuleSpec.attributeTypeMap;
    }
}

