/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstallRemediation } from './ioFluxcdToolkitHelmV2beta1HelmReleaseSpecInstallRemediation';

/**
* Install holds the configuration for Helm install actions for this HelmRelease.
*/
export class IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstall {
    /**
    * CRDs upgrade CRDs from the Helm Chart\'s crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.   Skip: do neither install nor replace (update) any CRDs.   Create: new CRDs are created, existing CRDs are neither updated nor deleted.   CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.   By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
    */
    'crds'?: IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstall.CrdsEnum;
    /**
    * CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
    */
    'createNamespace'?: boolean;
    /**
    * DisableHooks prevents hooks from running during the Helm install action.
    */
    'disableHooks'?: boolean;
    /**
    * DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
    */
    'disableOpenAPIValidation'?: boolean;
    /**
    * DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
    */
    'disableWait'?: boolean;
    /**
    * DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
    */
    'disableWaitForJobs'?: boolean;
    'remediation'?: IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstallRemediation;
    /**
    * Replace tells the Helm install action to re-use the \'ReleaseName\', but only if that name is a deleted release which remains in the history.
    */
    'replace'?: boolean;
    /**
    * SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.   Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
    */
    'skipCRDs'?: boolean;
    /**
    * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to \'HelmReleaseSpec.Timeout\'.
    */
    'timeout'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "crds",
            "baseName": "crds",
            "type": "IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstall.CrdsEnum"
        },
        {
            "name": "createNamespace",
            "baseName": "createNamespace",
            "type": "boolean"
        },
        {
            "name": "disableHooks",
            "baseName": "disableHooks",
            "type": "boolean"
        },
        {
            "name": "disableOpenAPIValidation",
            "baseName": "disableOpenAPIValidation",
            "type": "boolean"
        },
        {
            "name": "disableWait",
            "baseName": "disableWait",
            "type": "boolean"
        },
        {
            "name": "disableWaitForJobs",
            "baseName": "disableWaitForJobs",
            "type": "boolean"
        },
        {
            "name": "remediation",
            "baseName": "remediation",
            "type": "IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstallRemediation"
        },
        {
            "name": "replace",
            "baseName": "replace",
            "type": "boolean"
        },
        {
            "name": "skipCRDs",
            "baseName": "skipCRDs",
            "type": "boolean"
        },
        {
            "name": "timeout",
            "baseName": "timeout",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstall.attributeTypeMap;
    }
}

export namespace IoFluxcdToolkitHelmV2beta1HelmReleaseSpecInstall {
    export enum CrdsEnum {
        Skip = <any> 'Skip',
        Create = <any> 'Create',
        CreateReplace = <any> 'CreateReplace'
    }
}
