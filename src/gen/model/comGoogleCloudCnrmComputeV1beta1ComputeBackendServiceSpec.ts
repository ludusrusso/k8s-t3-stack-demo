/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCircuitBreakers } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCircuitBreakers';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConnectionTrackingPolicy } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConnectionTrackingPolicy';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConsistentHash } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConsistentHash';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecFailoverPolicy } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecFailoverPolicy';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecHealthChecksInner } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecHealthChecksInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecIap } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecIap';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecLogConfig } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecLogConfig';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecNetworkRef } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecNetworkRef';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecOutlierDetection } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecOutlierDetection';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecurityPolicyRef } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecurityPolicyRef';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecuritySettings } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecuritySettings';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSubsetting } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSubsetting';

export class ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpec {
    /**
    * Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.  When the load balancing scheme is INTERNAL, this field is not used.
    */
    'affinityCookieTtlSec'?: number;
    /**
    * The set of backends that serve this BackendService.
    */
    'backend'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner>;
    'cdnPolicy'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy;
    'circuitBreakers'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCircuitBreakers;
    /**
    * Time for which instance will be drained (not accept new connections, but still work to finish started).
    */
    'connectionDrainingTimeoutSec'?: number;
    'connectionTrackingPolicy'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConnectionTrackingPolicy;
    'consistentHash'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConsistentHash;
    /**
    * Headers that the HTTP/S load balancer should add to proxied requests.
    */
    'customRequestHeaders'?: Array<string>;
    /**
    * Headers that the HTTP/S load balancer should add to proxied responses.
    */
    'customResponseHeaders'?: Array<string>;
    /**
    * An optional description of this resource.
    */
    'description'?: string;
    /**
    * If true, enable Cloud CDN for this BackendService.
    */
    'enableCdn'?: boolean;
    'failoverPolicy'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecFailoverPolicy;
    'healthChecks'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecHealthChecksInner>;
    'iap'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecIap;
    /**
    * Immutable. Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service). Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL_SELF_MANAGED\", \"EXTERNAL_MANAGED\"].
    */
    'loadBalancingScheme'?: string;
    /**
    * The load balancing algorithm used within the scope of the locality. The possible values are:  * \'ROUND_ROBIN\': This is a simple policy in which each healthy backend                  is selected in round robin order.  * \'LEAST_REQUEST\': An O(1) algorithm which selects two random healthy                    hosts and picks the host which has fewer active requests.  * \'RING_HASH\': The ring/modulo hash load balancer implements consistent                hashing to backends. The algorithm has the property that the                addition/removal of a host from a set of N hosts only affects                1/N of the requests.  * \'RANDOM\': The load balancer selects a random healthy host.  * \'ORIGINAL_DESTINATION\': Backend host is selected based on the client                           connection metadata, i.e., connections are opened                           to the same address as the destination address of                           the incoming connection before the connection                           was redirected to the load balancer.  * \'MAGLEV\': used as a drop in replacement for the ring hash load balancer.             Maglev is not as stable as ring hash but has faster table lookup             build times and host selection times. For more information about             Maglev, refer to https://ai.google/research/pubs/pub44824   This field is applicable to either:  * A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2,   and loadBalancingScheme set to INTERNAL_MANAGED. * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.   If session_affinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.  Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validate_for_proxyless field set to true. Possible values: [\"ROUND_ROBIN\", \"LEAST_REQUEST\", \"RING_HASH\", \"RANDOM\", \"ORIGINAL_DESTINATION\", \"MAGLEV\"].
    */
    'localityLbPolicy'?: string;
    /**
    * Location represents the geographical location of the ComputeBackendService. Specify a region name or \"global\" for global resources. Reference: GCP definition of regions/zones (https://cloud.google.com/compute/docs/regions-zones/)
    */
    'location': string;
    'logConfig'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecLogConfig;
    'networkRef'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecNetworkRef;
    'outlierDetection'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecOutlierDetection;
    /**
    * Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.
    */
    'portName'?: string;
    /**
    * The protocol this BackendService uses to communicate with backends. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may result in errors if used with the GA API. Possible values: [\"HTTP\", \"HTTPS\", \"HTTP2\", \"TCP\", \"SSL\", \"GRPC\"].
    */
    'protocol'?: string;
    /**
    * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    */
    'resourceID'?: string;
    'securityPolicyRef'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecurityPolicyRef;
    'securitySettings'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecuritySettings;
    /**
    * Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP. Possible values: [\"NONE\", \"CLIENT_IP\", \"CLIENT_IP_PORT_PROTO\", \"CLIENT_IP_PROTO\", \"GENERATED_COOKIE\", \"HEADER_FIELD\", \"HTTP_COOKIE\"].
    */
    'sessionAffinity'?: string;
    'subsetting'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSubsetting;
    /**
    * How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is [1, 86400].
    */
    'timeoutSec'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "affinityCookieTtlSec",
            "baseName": "affinityCookieTtlSec",
            "type": "number"
        },
        {
            "name": "backend",
            "baseName": "backend",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner>"
        },
        {
            "name": "cdnPolicy",
            "baseName": "cdnPolicy",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy"
        },
        {
            "name": "circuitBreakers",
            "baseName": "circuitBreakers",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCircuitBreakers"
        },
        {
            "name": "connectionDrainingTimeoutSec",
            "baseName": "connectionDrainingTimeoutSec",
            "type": "number"
        },
        {
            "name": "connectionTrackingPolicy",
            "baseName": "connectionTrackingPolicy",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConnectionTrackingPolicy"
        },
        {
            "name": "consistentHash",
            "baseName": "consistentHash",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecConsistentHash"
        },
        {
            "name": "customRequestHeaders",
            "baseName": "customRequestHeaders",
            "type": "Array<string>"
        },
        {
            "name": "customResponseHeaders",
            "baseName": "customResponseHeaders",
            "type": "Array<string>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "enableCdn",
            "baseName": "enableCdn",
            "type": "boolean"
        },
        {
            "name": "failoverPolicy",
            "baseName": "failoverPolicy",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecFailoverPolicy"
        },
        {
            "name": "healthChecks",
            "baseName": "healthChecks",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecHealthChecksInner>"
        },
        {
            "name": "iap",
            "baseName": "iap",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecIap"
        },
        {
            "name": "loadBalancingScheme",
            "baseName": "loadBalancingScheme",
            "type": "string"
        },
        {
            "name": "localityLbPolicy",
            "baseName": "localityLbPolicy",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        },
        {
            "name": "logConfig",
            "baseName": "logConfig",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecLogConfig"
        },
        {
            "name": "networkRef",
            "baseName": "networkRef",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecNetworkRef"
        },
        {
            "name": "outlierDetection",
            "baseName": "outlierDetection",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecOutlierDetection"
        },
        {
            "name": "portName",
            "baseName": "portName",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "resourceID",
            "baseName": "resourceID",
            "type": "string"
        },
        {
            "name": "securityPolicyRef",
            "baseName": "securityPolicyRef",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecurityPolicyRef"
        },
        {
            "name": "securitySettings",
            "baseName": "securitySettings",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSecuritySettings"
        },
        {
            "name": "sessionAffinity",
            "baseName": "sessionAffinity",
            "type": "string"
        },
        {
            "name": "subsetting",
            "baseName": "subsetting",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecSubsetting"
        },
        {
            "name": "timeoutSec",
            "baseName": "timeoutSec",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpec.attributeTypeMap;
    }
}

