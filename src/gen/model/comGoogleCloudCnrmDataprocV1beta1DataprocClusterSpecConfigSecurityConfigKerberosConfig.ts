/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfigKmsKeyRef } from './comGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfigKmsKeyRef';

/**
* Immutable. Optional. Kerberos related configuration.
*/
export class ComGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfig {
    /**
    * Immutable. Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
    */
    'crossRealmTrustAdminServer'?: string;
    /**
    * Immutable. Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
    */
    'crossRealmTrustKdc'?: string;
    /**
    * Immutable. Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
    */
    'crossRealmTrustRealm'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
    */
    'crossRealmTrustSharedPassword'?: string;
    /**
    * Immutable. Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
    */
    'enableKerberos'?: boolean;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
    */
    'kdcDbKey'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
    */
    'keyPassword'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
    */
    'keystore'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
    */
    'keystorePassword'?: string;
    'kmsKeyRef'?: ComGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfigKmsKeyRef;
    /**
    * Immutable. Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
    */
    'realm'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
    */
    'rootPrincipalPassword'?: string;
    /**
    * Immutable. Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
    */
    'tgtLifetimeHours'?: number;
    /**
    * Immutable. Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
    */
    'truststore'?: string;
    /**
    * Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
    */
    'truststorePassword'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "crossRealmTrustAdminServer",
            "baseName": "crossRealmTrustAdminServer",
            "type": "string"
        },
        {
            "name": "crossRealmTrustKdc",
            "baseName": "crossRealmTrustKdc",
            "type": "string"
        },
        {
            "name": "crossRealmTrustRealm",
            "baseName": "crossRealmTrustRealm",
            "type": "string"
        },
        {
            "name": "crossRealmTrustSharedPassword",
            "baseName": "crossRealmTrustSharedPassword",
            "type": "string"
        },
        {
            "name": "enableKerberos",
            "baseName": "enableKerberos",
            "type": "boolean"
        },
        {
            "name": "kdcDbKey",
            "baseName": "kdcDbKey",
            "type": "string"
        },
        {
            "name": "keyPassword",
            "baseName": "keyPassword",
            "type": "string"
        },
        {
            "name": "keystore",
            "baseName": "keystore",
            "type": "string"
        },
        {
            "name": "keystorePassword",
            "baseName": "keystorePassword",
            "type": "string"
        },
        {
            "name": "kmsKeyRef",
            "baseName": "kmsKeyRef",
            "type": "ComGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfigKmsKeyRef"
        },
        {
            "name": "realm",
            "baseName": "realm",
            "type": "string"
        },
        {
            "name": "rootPrincipalPassword",
            "baseName": "rootPrincipalPassword",
            "type": "string"
        },
        {
            "name": "tgtLifetimeHours",
            "baseName": "tgtLifetimeHours",
            "type": "number"
        },
        {
            "name": "truststore",
            "baseName": "truststore",
            "type": "string"
        },
        {
            "name": "truststorePassword",
            "baseName": "truststorePassword",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmDataprocV1beta1DataprocClusterSpecConfigSecurityConfigKerberosConfig.attributeTypeMap;
    }
}

