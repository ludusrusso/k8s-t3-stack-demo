/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoNatsJetstreamV1beta2ConsumerSpecTls } from './ioNatsJetstreamV1beta2ConsumerSpecTls';
import { IoNatsJetstreamV1beta2StreamSpecMirror } from './ioNatsJetstreamV1beta2StreamSpecMirror';
import { IoNatsJetstreamV1beta2StreamSpecPlacement } from './ioNatsJetstreamV1beta2StreamSpecPlacement';
import { IoNatsJetstreamV1beta2StreamSpecSourcesInner } from './ioNatsJetstreamV1beta2StreamSpecSourcesInner';

export class IoNatsJetstreamV1beta2StreamSpec {
    /**
    * Name of the account to which the Stream belongs.
    */
    'account'?: string;
    /**
    * NATS user credentials for connecting to servers. Please make sure your controller has mounted the cerds on its path.
    */
    'creds'?: string;
    /**
    * The description of the stream.
    */
    'description'?: string;
    /**
    * When a Stream reach it\'s limits either old messages are deleted or new ones are denied.
    */
    'discard'?: IoNatsJetstreamV1beta2StreamSpec.DiscardEnum;
    /**
    * The duration window to track duplicate messages for.
    */
    'duplicateWindow'?: string;
    /**
    * Maximum age of any message in the stream, expressed in Go\'s time.Duration format. Empty for unlimited.
    */
    'maxAge'?: string;
    /**
    * How big the Stream may be, when the combined stream size exceeds this old messages are removed. -1 for unlimited.
    */
    'maxBytes'?: number;
    /**
    * How many Consumers can be defined for a given Stream. -1 for unlimited.
    */
    'maxConsumers'?: number;
    /**
    * The largest message that will be accepted by the Stream. -1 for unlimited.
    */
    'maxMsgSize'?: number;
    /**
    * How many messages may be in a Stream, oldest messages will be removed if the Stream exceeds this size. -1 for unlimited.
    */
    'maxMsgs'?: number;
    /**
    * The maximum of messages per subject.
    */
    'maxMsgsPerSubject'?: number;
    'mirror'?: IoNatsJetstreamV1beta2StreamSpecMirror;
    /**
    * A unique name for the Stream.
    */
    'name'?: string;
    /**
    * NATS user NKey for connecting to servers.
    */
    'nkey'?: string;
    /**
    * Disables acknowledging messages that are received by the Stream.
    */
    'noAck'?: boolean;
    'placement'?: IoNatsJetstreamV1beta2StreamSpecPlacement;
    /**
    * How many replicas to keep for each message.
    */
    'replicas'?: number;
    /**
    * How messages are retained in the Stream, once this is exceeded old messages are removed.
    */
    'retention'?: IoNatsJetstreamV1beta2StreamSpec.RetentionEnum;
    /**
    * A list of servers for creating stream
    */
    'servers'?: Array<string>;
    /**
    * A stream\'s sources.
    */
    'sources'?: Array<IoNatsJetstreamV1beta2StreamSpecSourcesInner>;
    /**
    * The storage backend to use for the Stream.
    */
    'storage'?: IoNatsJetstreamV1beta2StreamSpec.StorageEnum;
    /**
    * A list of subjects to consume, supports wildcards.
    */
    'subjects'?: Array<string>;
    'tls'?: IoNatsJetstreamV1beta2ConsumerSpecTls;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "creds",
            "baseName": "creds",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "discard",
            "baseName": "discard",
            "type": "IoNatsJetstreamV1beta2StreamSpec.DiscardEnum"
        },
        {
            "name": "duplicateWindow",
            "baseName": "duplicateWindow",
            "type": "string"
        },
        {
            "name": "maxAge",
            "baseName": "maxAge",
            "type": "string"
        },
        {
            "name": "maxBytes",
            "baseName": "maxBytes",
            "type": "number"
        },
        {
            "name": "maxConsumers",
            "baseName": "maxConsumers",
            "type": "number"
        },
        {
            "name": "maxMsgSize",
            "baseName": "maxMsgSize",
            "type": "number"
        },
        {
            "name": "maxMsgs",
            "baseName": "maxMsgs",
            "type": "number"
        },
        {
            "name": "maxMsgsPerSubject",
            "baseName": "maxMsgsPerSubject",
            "type": "number"
        },
        {
            "name": "mirror",
            "baseName": "mirror",
            "type": "IoNatsJetstreamV1beta2StreamSpecMirror"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nkey",
            "baseName": "nkey",
            "type": "string"
        },
        {
            "name": "noAck",
            "baseName": "noAck",
            "type": "boolean"
        },
        {
            "name": "placement",
            "baseName": "placement",
            "type": "IoNatsJetstreamV1beta2StreamSpecPlacement"
        },
        {
            "name": "replicas",
            "baseName": "replicas",
            "type": "number"
        },
        {
            "name": "retention",
            "baseName": "retention",
            "type": "IoNatsJetstreamV1beta2StreamSpec.RetentionEnum"
        },
        {
            "name": "servers",
            "baseName": "servers",
            "type": "Array<string>"
        },
        {
            "name": "sources",
            "baseName": "sources",
            "type": "Array<IoNatsJetstreamV1beta2StreamSpecSourcesInner>"
        },
        {
            "name": "storage",
            "baseName": "storage",
            "type": "IoNatsJetstreamV1beta2StreamSpec.StorageEnum"
        },
        {
            "name": "subjects",
            "baseName": "subjects",
            "type": "Array<string>"
        },
        {
            "name": "tls",
            "baseName": "tls",
            "type": "IoNatsJetstreamV1beta2ConsumerSpecTls"
        }    ];

    static getAttributeTypeMap() {
        return IoNatsJetstreamV1beta2StreamSpec.attributeTypeMap;
    }
}

export namespace IoNatsJetstreamV1beta2StreamSpec {
    export enum DiscardEnum {
        Old = <any> 'old',
        New = <any> 'new'
    }
    export enum RetentionEnum {
        Limits = <any> 'limits',
        Interest = <any> 'interest',
        Workqueue = <any> 'workqueue'
    }
    export enum StorageEnum {
        File = <any> 'file',
        Memory = <any> 'memory'
    }
}
