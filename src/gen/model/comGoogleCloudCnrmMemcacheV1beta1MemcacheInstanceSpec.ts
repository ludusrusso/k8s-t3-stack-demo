/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMaintenancePolicy } from './comGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMaintenancePolicy';
import { ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMemcacheParameters } from './comGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMemcacheParameters';
import { ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNetworkRef } from './comGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNetworkRef';
import { ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNodeConfig } from './comGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNodeConfig';

export class ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpec {
    /**
    * A user-visible name for the instance.
    */
    'displayName'?: string;
    'maintenancePolicy'?: ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMaintenancePolicy;
    'memcacheParameters'?: ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMemcacheParameters;
    /**
    * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the latest supported minor version. Default value: \"MEMCACHE_1_5\" Possible values: [\"MEMCACHE_1_5\"].
    */
    'memcacheVersion'?: string;
    'networkRef'?: ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNetworkRef;
    'nodeConfig': ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNodeConfig;
    /**
    * Number of nodes in the memcache instance.
    */
    'nodeCount': number;
    /**
    * Immutable. The region of the Memcache instance. If it is not provided, the provider region is used.
    */
    'region': string;
    /**
    * Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    */
    'resourceID'?: string;
    /**
    * Immutable. Zones where memcache nodes should be provisioned.  If not provided, all zones will be used.
    */
    'zones'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "maintenancePolicy",
            "baseName": "maintenancePolicy",
            "type": "ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMaintenancePolicy"
        },
        {
            "name": "memcacheParameters",
            "baseName": "memcacheParameters",
            "type": "ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecMemcacheParameters"
        },
        {
            "name": "memcacheVersion",
            "baseName": "memcacheVersion",
            "type": "string"
        },
        {
            "name": "networkRef",
            "baseName": "networkRef",
            "type": "ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNetworkRef"
        },
        {
            "name": "nodeConfig",
            "baseName": "nodeConfig",
            "type": "ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpecNodeConfig"
        },
        {
            "name": "nodeCount",
            "baseName": "nodeCount",
            "type": "number"
        },
        {
            "name": "region",
            "baseName": "region",
            "type": "string"
        },
        {
            "name": "resourceID",
            "baseName": "resourceID",
            "type": "string"
        },
        {
            "name": "zones",
            "baseName": "zones",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmMemcacheV1beta1MemcacheInstanceSpec.attributeTypeMap;
    }
}

