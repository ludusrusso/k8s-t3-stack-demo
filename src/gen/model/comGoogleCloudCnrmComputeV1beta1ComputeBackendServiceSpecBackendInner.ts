/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInnerGroup } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInnerGroup';

export class ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner {
    /**
    * Specifies the balancing mode for this backend.  For global HTTP(S) or TCP/SSL load balancing, the default is UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)) and CONNECTION (for TCP/SSL). Default value: \"UTILIZATION\" Possible values: [\"UTILIZATION\", \"RATE\", \"CONNECTION\"].
    */
    'balancingMode'?: string;
    /**
    * A multiplier applied to the group\'s maximum servicing capacity (based on UTILIZATION, RATE or CONNECTION).  Default value is 1, which means the group will serve up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available Capacity. Valid range is [0.0,1.0].
    */
    'capacityScaler'?: number;
    /**
    * An optional description of this resource. Provide this property when you create the resource.
    */
    'description'?: string;
    /**
    * This field designates whether this is a failover backend. More than one failover backend can be configured for a given RegionBackendService.
    */
    'failover'?: boolean;
    'group': ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInnerGroup;
    /**
    * The max number of simultaneous connections for the group. Can be used with either CONNECTION or UTILIZATION balancing modes.  For CONNECTION mode, either maxConnections or one of maxConnectionsPerInstance or maxConnectionsPerEndpoint, as appropriate for group type, must be set.
    */
    'maxConnections'?: number;
    /**
    * The max number of simultaneous connections that a single backend network endpoint can handle. This is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes.  For CONNECTION mode, either maxConnections or maxConnectionsPerEndpoint must be set.
    */
    'maxConnectionsPerEndpoint'?: number;
    /**
    * The max number of simultaneous connections that a single backend instance can handle. This is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes.  For CONNECTION mode, either maxConnections or maxConnectionsPerInstance must be set.
    */
    'maxConnectionsPerInstance'?: number;
    /**
    * The max requests per second (RPS) of the group.  Can be used with either RATE or UTILIZATION balancing modes, but required if RATE mode. For RATE mode, either maxRate or one of maxRatePerInstance or maxRatePerEndpoint, as appropriate for group type, must be set.
    */
    'maxRate'?: number;
    /**
    * The max requests per second (RPS) that a single backend network endpoint can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerEndpoint must be set.
    */
    'maxRatePerEndpoint'?: number;
    /**
    * The max requests per second (RPS) that a single backend instance can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerInstance must be set.
    */
    'maxRatePerInstance'?: number;
    /**
    * Used when balancingMode is UTILIZATION. This ratio defines the CPU utilization target for the group. Valid range is [0.0, 1.0].
    */
    'maxUtilization'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "balancingMode",
            "baseName": "balancingMode",
            "type": "string"
        },
        {
            "name": "capacityScaler",
            "baseName": "capacityScaler",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "failover",
            "baseName": "failover",
            "type": "boolean"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInnerGroup"
        },
        {
            "name": "maxConnections",
            "baseName": "maxConnections",
            "type": "number"
        },
        {
            "name": "maxConnectionsPerEndpoint",
            "baseName": "maxConnectionsPerEndpoint",
            "type": "number"
        },
        {
            "name": "maxConnectionsPerInstance",
            "baseName": "maxConnectionsPerInstance",
            "type": "number"
        },
        {
            "name": "maxRate",
            "baseName": "maxRate",
            "type": "number"
        },
        {
            "name": "maxRatePerEndpoint",
            "baseName": "maxRatePerEndpoint",
            "type": "number"
        },
        {
            "name": "maxRatePerInstance",
            "baseName": "maxRatePerInstance",
            "type": "number"
        },
        {
            "name": "maxUtilization",
            "baseName": "maxUtilization",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecBackendInner.attributeTypeMap;
    }
}

