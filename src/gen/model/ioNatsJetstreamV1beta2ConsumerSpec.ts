/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { IoNatsJetstreamV1beta2ConsumerSpecTls } from './ioNatsJetstreamV1beta2ConsumerSpecTls';

export class IoNatsJetstreamV1beta2ConsumerSpec {
    /**
    * Name of the account to which the Consumer belongs.
    */
    'account'?: string;
    /**
    * How messages should be acknowledged.
    */
    'ackPolicy'?: IoNatsJetstreamV1beta2ConsumerSpec.AckPolicyEnum;
    /**
    * How long to allow messages to remain un-acknowledged before attempting redelivery.
    */
    'ackWait'?: string;
    /**
    * NATS user credentials for connecting to servers. Please make sure your controller has mounted the cerds on its path.
    */
    'creds'?: string;
    /**
    * The name of a queue group.
    */
    'deliverGroup'?: string;
    'deliverPolicy'?: IoNatsJetstreamV1beta2ConsumerSpec.DeliverPolicyEnum;
    /**
    * The subject to deliver observed messages, when not set, a pull-based Consumer is created.
    */
    'deliverSubject'?: string;
    /**
    * The description of the consumer.
    */
    'description'?: string;
    /**
    * The name of the Consumer.
    */
    'durableName'?: string;
    /**
    * Select only a specific incoming subjects, supports wildcards.
    */
    'filterSubject'?: string;
    /**
    * Enables flow control.
    */
    'flowControl'?: boolean;
    /**
    * The interval used to deliver idle heartbeats for push-based consumers, in Go\'s time.Duration format.
    */
    'heartbeatInterval'?: string;
    /**
    * Maximum pending Acks before consumers are paused
    */
    'maxAckPending'?: number;
    'maxDeliver'?: number;
    /**
    * NATS user NKey for connecting to servers.
    */
    'nkey'?: string;
    'optStartSeq'?: number;
    /**
    * Time format must be RFC3339.
    */
    'optStartTime'?: string;
    /**
    * rate at which messages will be delivered to clients, expressed in bit per second.
    */
    'rateLimitBps'?: number;
    /**
    * How messages are sent.
    */
    'replayPolicy'?: IoNatsJetstreamV1beta2ConsumerSpec.ReplayPolicyEnum;
    /**
    * What percentage of acknowledgements should be samples for observability.
    */
    'sampleFreq'?: string;
    /**
    * A list of servers for creating consumer
    */
    'servers'?: Array<string>;
    /**
    * The name of the Stream to create the Consumer in.
    */
    'streamName'?: string;
    'tls'?: IoNatsJetstreamV1beta2ConsumerSpecTls;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "ackPolicy",
            "baseName": "ackPolicy",
            "type": "IoNatsJetstreamV1beta2ConsumerSpec.AckPolicyEnum"
        },
        {
            "name": "ackWait",
            "baseName": "ackWait",
            "type": "string"
        },
        {
            "name": "creds",
            "baseName": "creds",
            "type": "string"
        },
        {
            "name": "deliverGroup",
            "baseName": "deliverGroup",
            "type": "string"
        },
        {
            "name": "deliverPolicy",
            "baseName": "deliverPolicy",
            "type": "IoNatsJetstreamV1beta2ConsumerSpec.DeliverPolicyEnum"
        },
        {
            "name": "deliverSubject",
            "baseName": "deliverSubject",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "durableName",
            "baseName": "durableName",
            "type": "string"
        },
        {
            "name": "filterSubject",
            "baseName": "filterSubject",
            "type": "string"
        },
        {
            "name": "flowControl",
            "baseName": "flowControl",
            "type": "boolean"
        },
        {
            "name": "heartbeatInterval",
            "baseName": "heartbeatInterval",
            "type": "string"
        },
        {
            "name": "maxAckPending",
            "baseName": "maxAckPending",
            "type": "number"
        },
        {
            "name": "maxDeliver",
            "baseName": "maxDeliver",
            "type": "number"
        },
        {
            "name": "nkey",
            "baseName": "nkey",
            "type": "string"
        },
        {
            "name": "optStartSeq",
            "baseName": "optStartSeq",
            "type": "number"
        },
        {
            "name": "optStartTime",
            "baseName": "optStartTime",
            "type": "string"
        },
        {
            "name": "rateLimitBps",
            "baseName": "rateLimitBps",
            "type": "number"
        },
        {
            "name": "replayPolicy",
            "baseName": "replayPolicy",
            "type": "IoNatsJetstreamV1beta2ConsumerSpec.ReplayPolicyEnum"
        },
        {
            "name": "sampleFreq",
            "baseName": "sampleFreq",
            "type": "string"
        },
        {
            "name": "servers",
            "baseName": "servers",
            "type": "Array<string>"
        },
        {
            "name": "streamName",
            "baseName": "streamName",
            "type": "string"
        },
        {
            "name": "tls",
            "baseName": "tls",
            "type": "IoNatsJetstreamV1beta2ConsumerSpecTls"
        }    ];

    static getAttributeTypeMap() {
        return IoNatsJetstreamV1beta2ConsumerSpec.attributeTypeMap;
    }
}

export namespace IoNatsJetstreamV1beta2ConsumerSpec {
    export enum AckPolicyEnum {
        None = <any> 'none',
        All = <any> 'all',
        Explicit = <any> 'explicit'
    }
    export enum DeliverPolicyEnum {
        All = <any> 'all',
        Last = <any> 'last',
        New = <any> 'new',
        ByStartSequence = <any> 'byStartSequence',
        ByStartTime = <any> 'byStartTime'
    }
    export enum ReplayPolicyEnum {
        Instant = <any> 'instant',
        Original = <any> 'original'
    }
}
