/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerHeaderMatchesInner } from './comGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerHeaderMatchesInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerMetadataFiltersInner } from './comGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerMetadataFiltersInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerQueryParameterMatchesInner } from './comGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerQueryParameterMatchesInner';

export class ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInner {
    /**
    * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. FullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    */
    'fullPathMatch'?: string;
    /**
    * Specifies a list of header match criteria, all of which must match corresponding headers in the request.
    */
    'headerMatches'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerHeaderMatchesInner>;
    /**
    * Specifies that prefixMatch and fullPathMatch matches are case sensitive. Defaults to false.
    */
    'ignoreCase'?: boolean;
    /**
    * Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. metadataFilters specified here can be overrides those specified in ForwardingRule that refers to this UrlMap. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    */
    'metadataFilters'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerMetadataFiltersInner>;
    /**
    * For satisfying the matchRule condition, the request\'s path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    */
    'prefixMatch'?: string;
    /**
    * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.
    */
    'queryParameterMatches'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerQueryParameterMatchesInner>;
    /**
    * For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    */
    'regexMatch'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "fullPathMatch",
            "baseName": "fullPathMatch",
            "type": "string"
        },
        {
            "name": "headerMatches",
            "baseName": "headerMatches",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerHeaderMatchesInner>"
        },
        {
            "name": "ignoreCase",
            "baseName": "ignoreCase",
            "type": "boolean"
        },
        {
            "name": "metadataFilters",
            "baseName": "metadataFilters",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerMetadataFiltersInner>"
        },
        {
            "name": "prefixMatch",
            "baseName": "prefixMatch",
            "type": "string"
        },
        {
            "name": "queryParameterMatches",
            "baseName": "queryParameterMatches",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInnerQueryParameterMatchesInner>"
        },
        {
            "name": "regexMatch",
            "baseName": "regexMatch",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmComputeV1beta1ComputeURLMapSpecPathMatcherInnerRouteRulesInnerMatchRulesInner.attributeTypeMap;
    }
}

