/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.24.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyInner } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyInner';
import { ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicyCacheKeyPolicy } from './comGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicyCacheKeyPolicy';

/**
* Cloud CDN configuration for this BackendService.
*/
export class ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy {
    'cacheKeyPolicy'?: ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicyCacheKeyPolicy;
    /**
    * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC Possible values: [\"USE_ORIGIN_HEADERS\", \"FORCE_CACHE_ALL\", \"CACHE_ALL_STATIC\"].
    */
    'cacheMode'?: string;
    /**
    * Specifies the maximum allowed TTL for cached content served by this origin.
    */
    'clientTtl'?: number;
    /**
    * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
    */
    'defaultTtl'?: number;
    /**
    * Specifies the maximum allowed TTL for cached content served by this origin.
    */
    'maxTtl'?: number;
    /**
    * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    */
    'negativeCaching'?: boolean;
    /**
    * Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy. Omitting the policy and leaving negativeCaching enabled will use Cloud CDN\'s default cache TTLs.
    */
    'negativeCachingPolicy'?: Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyInner>;
    /**
    * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    */
    'serveWhileStale'?: number;
    /**
    * Maximum number of seconds the response to a signed URL request will be considered fresh, defaults to 1hr (3600s). After this time period, the response will be revalidated before being served.  When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    */
    'signedUrlCacheMaxAgeSec'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cacheKeyPolicy",
            "baseName": "cacheKeyPolicy",
            "type": "ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicyCacheKeyPolicy"
        },
        {
            "name": "cacheMode",
            "baseName": "cacheMode",
            "type": "string"
        },
        {
            "name": "clientTtl",
            "baseName": "clientTtl",
            "type": "number"
        },
        {
            "name": "defaultTtl",
            "baseName": "defaultTtl",
            "type": "number"
        },
        {
            "name": "maxTtl",
            "baseName": "maxTtl",
            "type": "number"
        },
        {
            "name": "negativeCaching",
            "baseName": "negativeCaching",
            "type": "boolean"
        },
        {
            "name": "negativeCachingPolicy",
            "baseName": "negativeCachingPolicy",
            "type": "Array<ComGoogleCloudCnrmComputeV1beta1ComputeBackendBucketSpecCdnPolicyNegativeCachingPolicyInner>"
        },
        {
            "name": "serveWhileStale",
            "baseName": "serveWhileStale",
            "type": "number"
        },
        {
            "name": "signedUrlCacheMaxAgeSec",
            "baseName": "signedUrlCacheMaxAgeSec",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ComGoogleCloudCnrmComputeV1beta1ComputeBackendServiceSpecCdnPolicy.attributeTypeMap;
    }
}

